import TelegramBot from 'node-telegram-bot-api';

import { envClientSchema } from './environment';
import { WorkingTimeCounterRepositoryInterface } from './WorkingTimeCounterRepositoryInterface';
import { WorkingTimeCounterRepository } from './WorkingTimeCounterRepository';
import { createDbConnection } from './createDbConnection';

function formatProductCaption(product: Product) {
  return `*${product.name}*\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ: ${product.description}`;
}

export type Product = {
  id: number;
  name: string;
  description: string;
  imageUrl: string;
  parse_mode?: 'Markdown' | 'Markdown2' | 'HTML';
};

const products: Product[] = [
  {
    id: 1,
    name: '–î–æ–±–∞–≤–∏—Ç—å —á–∞—Å—ã',
    description: '–î–æ–±–∞–≤–∏—Ç—å –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —á–∞—Å—ã –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü',
    imageUrl:
      'https://thumbs.dreamstime.com/b/%D0%B1%D0%B8%D0%B7%D0%BD%D0%B5%D1%81%D0%BC%D0%B5%D0%BD-%D0%B2-%D0%BA%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D0%B8-%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D1%8F-%D0%B2%D1%80%D0%B5%D0%BC%D0%B5%D0%BD%D0%B8-210055625.jpg',
    parse_mode: 'Markdown',
  },
  {
    id: 2,
    name: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–Ω–µ–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ —á–∞—Å—ã',
    description: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —á–∞—Å—ã –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü',
    imageUrl: 'https://wallpapersgood.ru/wallpapers/main2/201727/1499165645595b73cd2742b5.88006733.jpg',
    parse_mode: 'Markdown',
  },
];

const telegramBotCommands: TelegramBot.BotCommand[] = [
  { command: 'start', description: '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞' },
  { command: 'ref', description: '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É' },
  { command: 'menu', description: '–ú–µ–Ω—é-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞' },
  { command: 'addtime', description: '–î–æ–±–∞–≤–∏—Ç—å —á–∞—Å—ã' },
  { command: 'myhours', description: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–Ω–µ–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ —á–∞—Å—ã' },
  { command: 'help', description: '–†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏' },
];

class WorkingTimeCounterBot {
  constructor(
    private readonly telegramBot: TelegramBot,
    private readonly workingTimeCounterRepository: WorkingTimeCounterRepositoryInterface,
  ) {}

  async launch(): Promise<void> {
    console.log('[WorkingTimeCounterBot.launch] init..');

    this.telegramBot.setMyCommands(telegramBotCommands);
    await this.onUserInputTextHandler();
  }

  private async onUserInputTextHandler(): Promise<void> {
    this.telegramBot.on('text', async (msg) => {
      // const msgWait = await bot.sendMessage(msg.chat.id, `–ë–æ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç...`);
      const chatId = msg.chat.id;
      const response = '–ü—Ä–∏–≤–µ—Ç! üëãüèª –í—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞!\n\n–ó–¥–µ—Å—å –µ—Å—Ç—å –≤–æ—Ç —Ç–∞–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:';
      // –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –º–∞—Å—Å–∏–≤—É products –º–µ—Ç–æ–¥–æ–º map –∏ —Å–æ–∑–¥–∞–µ–º —Å–∞–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ //
      const messageOptions = products.map((product) => {
        return {
          chat_id: chatId,
          photo: product.imageUrl,
          caption: formatProductCaption(product),
          parse_mode: product.parse_mode,
        };
      });

      try {
        if (msg.text && msg.text.startsWith('/start')) {
          await this.telegramBot.sendMessage(chatId, response);

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
          await Promise.all(
            messageOptions.map((options, index) => {
              return this.telegramBot.sendMessage(options.chat_id, options.caption, {
                // parse_mode: options.parse_mode,
                parse_mode: 'HTML',
                reply_markup: {
                  inline_keyboard: [[{ text: '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å', callback_data: `product_${index}` }]],
                },
              });
            }),
          );

          if (msg.text.length > 6) {
            const refID = msg.text.slice(7);

            await this.telegramBot.sendMessage(msg.chat.id, `–í—ã –∑–∞—à–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${refID}`);
          }
        } else if (msg.text == '/ref') {
          await this.telegramBot.sendMessage(msg.chat.id, `${envClientSchema.URL_TO_BOT}?start=${msg.from?.id}`);
        } else if (msg.text == '/help') {
          await this.telegramBot.sendMessage(msg.chat.id, '–†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏');
        } else if (msg.text == '/addtime') {
          await this.workingTimeCounterRepository.addWorkingTime({
            hours: 5,
            months: 5,
            userUuid: '123',
          });
          await this.telegramBot.sendMessage(msg.chat.id, '–í—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!');
        } else if (msg.text == '/myhours') {
          await this.workingTimeCounterRepository.getWorkingTime('123');
          await this.telegramBot.sendMessage(msg.chat.id, '–í –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏,\n–ø–æ–ø—Ä–æ–±—É–π —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ');
        } else {
          await this.telegramBot.sendMessage(msg.chat.id, '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª, –¥–∞–≤–∞–π –µ—â–µ —Ä–∞–∑.');
        }
      } catch (error) {
        console.log('error: ' + error);
      }
    });
  }
}

(async () => {
  const telegramToken = envClientSchema.BOT_TOKEN;
  const telegramBot = new TelegramBot(telegramToken, { polling: true });

  const dbConnection = await createDbConnection();
  const workingTimeCounterRepository = new WorkingTimeCounterRepository(
    dbConnection,
  );

  const workingTimeCounterBot = new WorkingTimeCounterBot(telegramBot, workingTimeCounterRepository);
  await workingTimeCounterBot.launch();
})().then(() => {
  console.log('Telegram bot is launched');
});
